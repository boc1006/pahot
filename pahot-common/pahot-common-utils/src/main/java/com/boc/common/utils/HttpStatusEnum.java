package com.boc.common.utils;

/**
 * <p>@Title HttpStatusEnum</p>
 * <p>@Description com.boc.common.utils</p>
 * <p>@Version 1.0.0 版本号</p>
 * <p>@author <a href="mailto:wangshilong@dgg.net">王仕龙</a></p>
 * <p>@date 2017-05-02 18:53</p>
 * <p>Copyright © dgg group.All Rights Reserved. 版权信息</p>
 */
public enum HttpStatusEnum {
    /* 1开头的状态码 */
    HS_100(100, "继续", "继续。客户端应继续其请求"),
    HS_101(101, "切换协议", "切换协议。服务器根据客户端的请求切换协议。只能切换到更高级的协议，例如，切换到HTTP的新版本协议"),
    /* 2开头的状态码 */
    HS_200(200, "请求成功", "请求成功。一般用于GET与POST请求"),
    HS_201(201, "已创建", "成功请求并创建了新的资源"),
    HS_202(202, "已接受", "已经接受请求，但未处理完成"),
    HS_203(203, "非授权信息", "请求成功。但返回的meta信息不在原始的服务器，而是一个副本"),
    HS_204(204, "无内容", "服务器成功处理，但未返回内容。在未更新网页的情况下，可确保浏览器继续显示当前文档"),
    HS_205(205, "重置内容", "服务器处理成功，用户终端（例如：浏览器）应重置文档视图。可通过此返回码清除浏览器的表单域"),
    HS_206(206, "部分内容", "服务器成功处理了部分GET请求"),
    /* 3开头的状态码 */
    HS_300(300, "多种选择", "请求的资源可包括多个位置，相应可返回一个资源特征与地址的列表用于用户终端（例如：浏览器）选择"),
    HS_301(301, "永久移动", "请求的资源已被永久的移动到新URI，返回信息会包括新的URI，浏览器会自动定向到新URI。今后任何新的请求都应使用新的URI代替"),
    HS_302(302, "临时移动", "与301类似。但资源只是临时被移动。客户端应继续使用原有URI"),
    HS_303(303, "查看其它地址", "与301类似。使用GET和POST请求查看"),
    HS_304(304, "未修改", "所请求的资源未修改，服务器返回此状态码时，不会返回任何资源。客户端通常会缓存访问过的资源，通过提供一个头信息指出客户端希望只返回在指定日期之后修改的资源"),
    HS_305(305, "使用代理", "所请求的资源必须通过代理访问"),
    HS_306(306, "Unused", "已经被废弃的HTTP状态码"),
    HS_307(307, "临时重定向", "与302类似。使用GET请求重定向"),
    /* 4开头的状态码 */
    HS_400(400, "客户端请求语法或参数错误", null),
    HS_401(401, "请求要求用户的身份认证", null),
    HS_402(402, "保留，将来使用", null),
    HS_403(403, "服务器理解请求客户端的请求，但是拒绝执行此请求", "服务器无法执行该请求"),
    HS_404(404, "服务器无法根据客户端的请求找到资源", "天啦！这个页面找不到了。。。 "),
    HS_405(405, "客户端请求中的方法被禁止", null),
    HS_406(406, "服务器无法根据客户端请求的内容特性完成请求", null),
    HS_407(407, "请求要求代理的身份认证，与401类似，但请求者应当使用代理进行授权", null),
    HS_408(408, "服务器等待客户端发送的请求时间过长，超时", null),
    HS_409(409, "服务器完成客户端的PUT请求是可能返回此代码，服务器处理请求时发生了冲突", null),
    HS_410(410, "客户端请求的资源已经不存在", "客户端请求的资源已经不存在。410不同于404，如果资源以前有现在被永久删除了可使用410代码，网站设计人员可通过301代码指定资源的新位置"),
    HS_411(411, "服务器无法处理客户端发送的不带Content-Length的请求信息", null),
    HS_412(412, "客户端请求信息的先决条件错误", null),
    HS_413(413, "由于请求的实体过大，服务器无法处理，因此拒绝请求", "由于请求的实体过大，服务器无法处理，因此拒绝请求。为防止客户端的连续请求，服务器可能会关闭连接。如果只是服务器暂时无法处理，则会包含一个Retry-After的响应信息"),
    HS_414(414, "请求的URI过长（URI通常为网址），服务器无法处理", "请求的URI过长，服务器无法处理"),
    HS_415(415, "服务器无法处理请求附带的媒体格式", null),
    HS_416(416, "客户端请求的范围无效", null),
    HS_417(417, "服务器无法满足Expect的请求头信息", null),
    HS_421(421, "连接数超过了服务器许可的最大范围", "从当前客户端所在的IP地址到服务器的连接数超过了服务器许可的最大范围。通常，这里的IP地址指的是从服务器上看到的客户端地址（比如用户的网关或者代理服务器地址）。在这种情况下，连接数的计算可能涉及到不止一个终端用户。"),
    HS_422(422, "请求格式正确，但是由于含有语义错误，无法响应", null),
    HS_424(424, "由于之前的某个请求发生的错误，导致当前请求失败", null),
    HS_425(425, "", "在WebDav Advanced Collections 草案中定义，但是未出现在《WebDAV 顺序集协议》（RFC 3658）中"),
    HS_426(426, "客户端应当切换到TLS/1.0", null),
    HS_449(449, "请求应当在执行完适当的操作后进行重试", "由微软扩展，代表请求应当在执行完适当的操作后进行重试"),
    /* 5开头的状态码 */
    HS_500(500, "服务器内部错误，无法完成请求", "天啦！这个页面出错了。。。 "),
    HS_501(501, "服务器不支持请求的功能，无法完成请求", null),
    HS_502(502, "充当网关或代理的服务器，从远端服务器接收到了一个无效的请求", "无效的请求"),
    HS_503(503, "由于超载或系统维护，服务器暂时的无法处理客户端的请求。延时的长度可包含在服务器的Retry-After头信息中", "系统正在维护中..."),
    HS_504(504, "充当网关或代理的服务器，未及时从远端服务器获取请求", "获取远端服务器获取请求超时"),
    HS_505(505, "服务器不支持请求的HTTP协议的版本，无法完成处理", "HTTP协议版本不支持"),
    HS_506(506, "服务器存在内部配置错误", "由《透明内容协商协议》（RFC 2295）扩展，代表服务器存在内部配置错误：被请求的协商变元资源被配置为在透明内容协商中使用自己，因此在一个协商处理中不是一个合适的重点。"),
    HS_507(507, "服务器无法存储完成请求所必须的内容", null),
    HS_509(509, "服务器达到带宽限制", "服务器达到带宽限制。这不是一个官方的状态码，但是仍被广泛使用"),
    HS_510(510, "获取资源所需要的策略并没有没满足", null),
    /*自定义状态码-后来发现自定义是发生浏览器解析不了，一直处于请求状态*/
    HS_4010(4010,"找不到该服务顾问", "找不到该服务顾问。。。"),
    HS_4011(4011, "找不到该服务", "找不到该服务。。。 ");
    private int code;
    private String text;
    private String remark;

    HttpStatusEnum(int code, String text, String remark) {
        this.code = code;
        this.text = text;
        this.remark = remark == null || remark.trim().length() == 0 ? text : remark;
    }

    public int getCode() {
        return code;
    }

    public String getText() {
        return text;
    }

    public String getRemark() {
        return remark;
    }

    public static String getText(int httpStatus) {
        HttpStatusEnum[] enumValues = HttpStatusEnum.values();
        for (HttpStatusEnum value : enumValues) {
            if (httpStatus == value.code) {
                return value.text;
            }
        }
        return "";
    }

    public static String getRemark(int httpStatus) {
        HttpStatusEnum[] enumValues = HttpStatusEnum.values();
        for (HttpStatusEnum value : enumValues) {
            if (httpStatus == value.code) {
                return value.remark;
            }
        }
        return "";
    }
}
